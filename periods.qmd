---
title: "Period Analysis"
format:
  html:
    code-fold: true
    code-tools: true
---

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Read the Excel file
df = pd.read_excel("mpd2018.xlsx", sheet_name="Full data")

# Filter for Former USSR
ussr_data = df[df['country'] == 'Former USSR'].copy()

# Sort by year
ussr_data = ussr_data.sort_values('year')

# Remove data before 1884
ussr_data = ussr_data[ussr_data['year'] >= 1884]

# Calculate GDP (using population and GDP per capita)
ussr_data['total_gdp'] = ussr_data['rgdpnapc'] * ussr_data['pop'] * 1000  # pop is in thousands
ussr_data['gdp_growth'] = ussr_data['total_gdp'].pct_change(fill_method=None) * 100

# Define periods
periods = [
    (1885, 1913, "Pre-Revolutionary\n(1885-1913)"),
    (1914, 1920, "WWI & Civil War\n(1914-1920)"),
    (1921, 1928, "NEP Period\n(1921-1928)"),
    (1929, 1941, "Early Soviet\n(1929-1941)"),
    # (1941, 1945, "WWII\n(1941-1945)"),
    (1945, 1955, "Post-War Recovery\n(1945-1955)"),
    (1956, 1991, "Late Soviet\n(1956-1991)"),
    (1992, 1998, "Post-Soviet Crisis\n(1992-1998)"),
    (1999, 2019, "Recovery & Growth\n(1999-2019)")
]

# Calculate average growth for each period
period_averages = []
for start_year, end_year, period_name in periods:
    mask = (ussr_data['year'] >= start_year) & (ussr_data['year'] <= end_year)
    avg_growth = ussr_data.loc[mask, 'gdp_growth'].mean()
    std_growth = ussr_data.loc[mask, 'gdp_growth'].std()
    n_years = mask.sum()
    period_averages.append({
        'period': period_name,
        'avg_growth': avg_growth,
        'std_growth': std_growth,
        'n_years': n_years,
        'start_year': start_year,
        'end_year': end_year
    })

# Calculate special periods (1929-1955)
mask_1929_1955 = (ussr_data['year'] >= 1929) & (ussr_data['year'] <= 1955)
avg_1929_1955 = ussr_data.loc[mask_1929_1955, 'gdp_growth'].mean()
std_1929_1955 = ussr_data.loc[mask_1929_1955, 'gdp_growth'].std()

# Calculate 1929-1955 without 1941-1945
mask_without_war = (
    ((ussr_data['year'] >= 1929) & (ussr_data['year'] < 1941)) |
    ((ussr_data['year'] > 1945) & (ussr_data['year'] <= 1955))
)
avg_1929_1955_no_war = ussr_data.loc[mask_without_war, 'gdp_growth'].mean()
std_1929_1955_no_war = ussr_data.loc[mask_without_war, 'gdp_growth'].std()

# Add special periods to the list
# period_averages.append({
#     'period': '1929-1955\n(including WWII)',
#     'avg_growth': avg_1929_1955,
#     'std_growth': std_1929_1955,
#     'n_years': mask_1929_1955.sum(),
#     'start_year': 1929,
#     'end_year': 1955
# })
period_averages.append({
    'period': '1929-1955\n(excluding WWII)',
    'avg_growth': avg_1929_1955_no_war,
    'std_growth': std_1929_1955_no_war,
    'n_years': mask_without_war.sum(),
    'start_year': 1929,
    'end_year': 1955
})

# Create DataFrame for plotting
df_plot = pd.DataFrame(period_averages)
```

```{python}
#| fig-cap: "Average GDP Growth Rate by Period"
# Create the bar plot with error bars
plt.figure()
bars = plt.bar(df_plot['period'], df_plot['avg_growth'],
               yerr=df_plot['std_growth'], capsize=5)

# Customize the plot
plt.title('Average GDP Growth Rate by Period (%)', pad=20)
plt.xlabel('Period')
plt.ylabel('Average Growth Rate (%)')
plt.grid(True, axis='y', linestyle='--', alpha=0.7)
plt.xticks(rotation=45, ha='right')

# Add value labels on top of each bar
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
             f'{height:.1f}%',
             ha='center', va='bottom')

plt.tight_layout()
plt.show()

# Display the detailed statistics
print("\nDetailed Statistics by Period")
print("-" * 40)
for row in period_averages:
    print(f"\n{row['period']}:")
    print(f"  Average Growth: {row['avg_growth']:.2f}%")
    print(f"  Standard Deviation: {row['std_growth']:.2f}%")
    print(f"  Number of Years: {row['n_years']}")
```

```{python}

# Create a table with the statistics
stats_df = pd.DataFrame(period_averages)
stats_df = stats_df[['period', 'avg_growth', 'std_growth', 'n_years']]
stats_df.columns = ['Period', 'Average Growth (%)', 'Std Dev (%)', 'Years']
display(stats_df.round(2))
```
